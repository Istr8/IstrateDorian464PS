# -*- coding: utf-8 -*-
"""Laborator2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YTqy4S2zBgdevecWyE_JbB26fM9pYbkn
"""

import numpy as np
from matplotlib import pyplot as plt

"""Exercitiul"""

# Parametrii semnalului sinusoidal
amplitudine = 2
frecventa = 0.5  # Hz
faza = np.pi / 4  # Radiani

# Definirea timpului
timp = np.linspace(0, 10, 1000)

# Generarea semnalului sinusoidal
semnal_sinus = amplitudine * np.sin(2 * np.pi * frecventa * timp + faza)
semnal_cosinus = amplitudine * np.cos(2 * np.pi * frecventa * timp + faza)

# Afisarea graficului
plt.figure(figsize=(12, 6))
# Subplotul pentru semnalul sinusoidal
plt.subplot(2, 1, 1)
plt.plot(timp, semnal_sinus, label='Semnal sinusoidal', color='b')
plt.title('Semnal sinusoidal')
plt.xlabel('Timp')
plt.ylabel('Amplitudine')
plt.legend()

# Afisarea graficului
plt.tight_layout()
plt.show()

"""Exercitiul 2"""

# Parametrii semnalului
amplitudine = 1
frecventa = 5  # Hz
faze = [0, np.pi/4, np.pi/2, 3*np.pi/4]  # diferite valori pentru faza

# Vectorul de timp
timp = np.linspace(0, 2 * np.pi, 1000)

# Generarea semnalului sinusoidal și adăugarea de zgomot
plt.figure(figsize=(10, 6))
for index, faza in enumerate(faze):
    semnal = amplitudine * np.sin(2 * np.pi * frecventa * timp + faza)

    # Adăugarea zgomotului
    snr_values = [0.1, 1, 10, 100]
    for snr in snr_values:
        gamma = np.sqrt(np.linalg.norm(semnal) ** 2 / (snr * np.linalg.norm(np.random.normal(size=len(semnal))) ** 2))
        zgomot = gamma * np.random.normal(size=len(semnal))
        semnal_zgomot = semnal + zgomot

        plt.plot(timp, semnal_zgomot, label=f'Faza: {faza}, SNR: {snr}')

# Setarea detaliilor pentru grafic
plt.title('Semnal sinusoidal cu zgomot la diferite SNR-uri și faze')
plt.xlabel('Timp')
plt.ylabel('Amplitudine')
plt.legend()
plt.show()

